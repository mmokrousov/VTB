{"uuid":"b52188b6-d144-45b7-b664-0f1eeedde74e","historyId":"6a0215c3f324a5336a56b5383b3c8800","fullName":"GetDepositsAndSavingsAccounts.GetDepositsAndSavingsAccountsMethods.GetDepositsAndSavingsAccountsPostBusinessTK1","labels":[{"name":"package","value":"GetDepositsAndSavingsAccounts.GetDepositsAndSavingsAccountsMethods"},{"name":"testClass","value":"GetDepositsAndSavingsAccounts.GetDepositsAndSavingsAccountsMethods"},{"name":"testMethod","value":"GetDepositsAndSavingsAccountsPostBusinessTK1"},{"name":"parentSuite","value":"Default Suite"},{"name":"suite","value":"Finstrategy-configurator"},{"name":"subSuite","value":"GetDepositsAndSavingsAccounts.GetDepositsAndSavingsAccountsMethods"},{"name":"host","value":"V96-1017"},{"name":"thread","value":"13168@V96-1017.main(1)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"}],"links":[],"name":"GetDepositsAndSavingsAccountsPostBusinessTK1","status":"failed","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"\r\nExpecting:\r\n  mmokrousov.Model.Response.GetDepositsAndSavingsAccountsResponse@7134b8a7\r\nto be equal to:\r\n  mmokrousov.Model.Response.GetDepositsAndSavingsAccountsResponse@2262d6d5\r\nwhen recursively comparing field by field, but found the following 9 differences:\r\n\r\nfield/property 'accounts[0].income' differ:\r\n- actual value   : 16360.41\r\n- expected value : 12657.53\r\n\r\nfield/property 'accounts[0].percent' differ:\r\n- actual value   : 8.0\r\n- expected value : 6.0\r\n\r\nfield/property 'accounts[0].totalAmount' differ:\r\n- actual value   : 716360.41\r\n- expected value : 712657.53\r\n\r\nfield/property 'accounts[0].yield' differ:\r\n- actual value   : 7.76\r\n- expected value : 6.0\r\n\r\nfield/property 'accounts[1].income' differ:\r\n- actual value   : 12042.68\r\n- expected value : 8438.36\r\n\r\nfield/property 'accounts[1].percent' differ:\r\n- actual value   : 6.0\r\n- expected value : 4.0\r\n\r\nfield/property 'accounts[1].totalAmount' differ:\r\n- actual value   : 712042.68\r\n- expected value : 708438.36\r\n\r\nfield/property 'accounts[1].yield' differ:\r\n- actual value   : 5.71\r\n- expected value : 4.0\r\n\r\nfield/property 'deposits' differ:\r\n- actual value   : [mmokrousov.Model.Response.Deposits@6968c1d6,\r\n    mmokrousov.Model.Response.Deposits@7d986d83]\r\n- expected value : [mmokrousov.Model.Response.Deposits@77f991c]\r\nactual and expected values are collections of different size, actual size=2 when expected size=1\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: \r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n","trace":"java.lang.AssertionError: \r\nExpecting:\r\n  mmokrousov.Model.Response.GetDepositsAndSavingsAccountsResponse@7134b8a7\r\nto be equal to:\r\n  mmokrousov.Model.Response.GetDepositsAndSavingsAccountsResponse@2262d6d5\r\nwhen recursively comparing field by field, but found the following 9 differences:\r\n\r\nfield/property 'accounts[0].income' differ:\r\n- actual value   : 16360.41\r\n- expected value : 12657.53\r\n\r\nfield/property 'accounts[0].percent' differ:\r\n- actual value   : 8.0\r\n- expected value : 6.0\r\n\r\nfield/property 'accounts[0].totalAmount' differ:\r\n- actual value   : 716360.41\r\n- expected value : 712657.53\r\n\r\nfield/property 'accounts[0].yield' differ:\r\n- actual value   : 7.76\r\n- expected value : 6.0\r\n\r\nfield/property 'accounts[1].income' differ:\r\n- actual value   : 12042.68\r\n- expected value : 8438.36\r\n\r\nfield/property 'accounts[1].percent' differ:\r\n- actual value   : 6.0\r\n- expected value : 4.0\r\n\r\nfield/property 'accounts[1].totalAmount' differ:\r\n- actual value   : 712042.68\r\n- expected value : 708438.36\r\n\r\nfield/property 'accounts[1].yield' differ:\r\n- actual value   : 5.71\r\n- expected value : 4.0\r\n\r\nfield/property 'deposits' differ:\r\n- actual value   : [mmokrousov.Model.Response.Deposits@6968c1d6,\r\n    mmokrousov.Model.Response.Deposits@7d986d83]\r\n- expected value : [mmokrousov.Model.Response.Deposits@77f991c]\r\nactual and expected values are collections of different size, actual size=2 when expected size=1\r\n\r\nThe recursive comparison was performed with this configuration:\r\n- the following fields were ignored in the comparison: \r\n- no overridden equals methods were used in the comparison (except for java types)\r\n- these types were compared with the following comparators:\r\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\r\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\r\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\r\n\r\n\tat mmokrousov.Comparator.GetDepositsAndSavingsAccountsComparator.compare(GetDepositsAndSavingsAccountsComparator.java:13)\r\n\tat mmokrousov.Comparator.GetDepositsAndSavingsAccountsComparator.compare(GetDepositsAndSavingsAccountsComparator.java:8)\r\n\tat GetDepositsAndSavingsAccounts.GetDepositsAndSavingsAccountsMethods.GetDepositsAndSavingsAccountsPostBusinessTK1(GetDepositsAndSavingsAccountsMethods.java:58)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:276)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1134)\r\n\tat org.testng.TestNG.runSuites(TestNG.java:1063)\r\n\tat org.testng.TestNG.run(TestNG.java:1031)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:110)\r\n"},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1659209577578,"stop":1659209594798}